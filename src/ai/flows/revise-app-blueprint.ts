'use server';

/**
 * @fileOverview A flow that revises an app blueprint based on user feedback.
 *
 * - reviseAppBlueprint - A function that revises the app blueprint based on user feedback.
 * - ReviseAppBlueprintInput - The input type for the reviseAppBlueprint function.
 * - ReviseAppBlueprintOutput - The return type for the reviseAppBlueprint function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ReviseAppBlueprintInputSchema = z.object({
  initialAppIdea: z
    .string()
    .describe('The user\u2019s initial idea for the app.'),
  currentBlueprint: z
    .string()
    .describe('The current app blueprint generated by the AI.'),
  userFeedback: z
    .string()
    .describe('The user\u2019s feedback on the current blueprint.'),
});
export type ReviseAppBlueprintInput = z.infer<typeof ReviseAppBlueprintInputSchema>;

const ReviseAppBlueprintOutputSchema = z.object({
  revisedBlueprint: z.string().describe('The revised app blueprint.'),
});
export type ReviseAppBlueprintOutput = z.infer<typeof ReviseAppBlueprintOutputSchema>;

export async function reviseAppBlueprint(
  input: ReviseAppBlueprintInput
): Promise<ReviseAppBlueprintOutput> {
  return reviseAppBlueprintFlow(input);
}

const prompt = ai.definePrompt({
  name: 'reviseAppBlueprintPrompt',
  input: {schema: ReviseAppBlueprintInputSchema},
  output: {schema: ReviseAppBlueprintOutputSchema},
  prompt: `You are an AI app design assistant. A user has provided an initial app idea, 
you generated an app blueprint, and now the user has provided feedback on that blueprint.
Your job is to revise the app blueprint based on the user's feedback, taking the initial app idea into account.

Initial App Idea: {{{initialAppIdea}}}

Current App Blueprint: {{{currentBlueprint}}}

User Feedback: {{{userFeedback}}}

Revised App Blueprint:`,
});

const reviseAppBlueprintFlow = ai.defineFlow(
  {
    name: 'reviseAppBlueprintFlow',
    inputSchema: ReviseAppBlueprintInputSchema,
    outputSchema: ReviseAppBlueprintOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return {revisedBlueprint: output!};
  }
);
